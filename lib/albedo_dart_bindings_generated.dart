// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/albedo_dart.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class AlbedoDartBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AlbedoDartBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AlbedoDartBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Open a database
  int albedo_open(ffi.Pointer<ffi.Char> path, ffi.Pointer<AlbedoBucket> out) {
    return _albedo_open(path, out);
  }

  late final _albedo_openPtr = _lookup<
    ffi.NativeFunction<
      AlbedoResult Function(ffi.Pointer<ffi.Char>, ffi.Pointer<AlbedoBucket>)
    >
  >('albedo_open');
  late final _albedo_open =
      _albedo_openPtr
          .asFunction<
            int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<AlbedoBucket>)
          >();

  /// Close a database
  int albedo_close(AlbedoBucket bucket) {
    return _albedo_close(bucket);
  }

  late final _albedo_closePtr =
      _lookup<ffi.NativeFunction<AlbedoResult Function(AlbedoBucket)>>(
        'albedo_close',
      );
  late final _albedo_close =
      _albedo_closePtr.asFunction<int Function(AlbedoBucket)>();

  /// Insert a document
  int albedo_insert(AlbedoBucket bucket, ffi.Pointer<ffi.Uint8> docBuffer) {
    return _albedo_insert(bucket, docBuffer);
  }

  late final _albedo_insertPtr = _lookup<
    ffi.NativeFunction<
      AlbedoResult Function(AlbedoBucket, ffi.Pointer<ffi.Uint8>)
    >
  >('albedo_insert');
  late final _albedo_insert =
      _albedo_insertPtr
          .asFunction<int Function(AlbedoBucket, ffi.Pointer<ffi.Uint8>)>();

  /// Delete documents matching a query
  int albedo_delete(
    AlbedoBucket bucket,
    ffi.Pointer<ffi.Uint8> queryBuffer,
    int queryLen,
  ) {
    return _albedo_delete(bucket, queryBuffer, queryLen);
  }

  late final _albedo_deletePtr = _lookup<
    ffi.NativeFunction<
      AlbedoResult Function(AlbedoBucket, ffi.Pointer<ffi.Uint8>, ffi.Uint16)
    >
  >('albedo_delete');
  late final _albedo_delete =
      _albedo_deletePtr
          .asFunction<
            int Function(AlbedoBucket, ffi.Pointer<ffi.Uint8>, int)
          >();

  /// List documents matching a query
  int albedo_list(
    AlbedoBucket bucket,
    ffi.Pointer<ffi.Uint8> queryBuffer,
    ffi.Pointer<AlbedoListHandle> outIterator,
  ) {
    return _albedo_list(bucket, queryBuffer, outIterator);
  }

  late final _albedo_listPtr = _lookup<
    ffi.NativeFunction<
      AlbedoResult Function(
        AlbedoBucket,
        ffi.Pointer<ffi.Uint8>,
        ffi.Pointer<AlbedoListHandle>,
      )
    >
  >('albedo_list');
  late final _albedo_list =
      _albedo_listPtr
          .asFunction<
            int Function(
              AlbedoBucket,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<AlbedoListHandle>,
            )
          >();

  /// Get the current document from the iterator
  int albedo_data(
    AlbedoListHandle handle,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> outDoc,
  ) {
    return _albedo_data(handle, outDoc);
  }

  late final _albedo_dataPtr = _lookup<
    ffi.NativeFunction<
      AlbedoResult Function(
        AlbedoListHandle,
        ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
      )
    >
  >('albedo_data');
  late final _albedo_data =
      _albedo_dataPtr
          .asFunction<
            int Function(AlbedoListHandle, ffi.Pointer<ffi.Pointer<ffi.Uint8>>)
          >();

  /// Advance the iterator
  int albedo_next(AlbedoListHandle handle) {
    return _albedo_next(handle);
  }

  late final _albedo_nextPtr =
      _lookup<ffi.NativeFunction<AlbedoResult Function(AlbedoListHandle)>>(
        'albedo_next',
      );
  late final _albedo_next =
      _albedo_nextPtr.asFunction<int Function(AlbedoListHandle)>();

  /// Close the iterator and free resources
  int albedo_close_iterator(AlbedoListHandle iterator) {
    return _albedo_close_iterator(iterator);
  }

  late final _albedo_close_iteratorPtr =
      _lookup<ffi.NativeFunction<AlbedoResult Function(AlbedoListHandle)>>(
        'albedo_close_iterator',
      );
  late final _albedo_close_iterator =
      _albedo_close_iteratorPtr.asFunction<int Function(AlbedoListHandle)>();

  /// Vacuum the database
  int albedo_vacuum(AlbedoBucket bucket) {
    return _albedo_vacuum(bucket);
  }

  late final _albedo_vacuumPtr =
      _lookup<ffi.NativeFunction<AlbedoResult Function(AlbedoBucket)>>(
        'albedo_vacuum',
      );
  late final _albedo_vacuum =
      _albedo_vacuumPtr.asFunction<int Function(AlbedoBucket)>();

  /// Get the library version
  int albedo_version() {
    return _albedo_version();
  }

  late final _albedo_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('albedo_version');
  late final _albedo_version = _albedo_versionPtr.asFunction<int Function()>();
}

typedef AlbedoResult = ffi.Uint8;
typedef DartAlbedoResult = int;

/// Opaque pointer types as void pointers
typedef AlbedoBucket = ffi.Pointer<ffi.Void>;
typedef AlbedoListHandle = ffi.Pointer<ffi.Void>;
